{"version":3,"sources":["constants.js","Board.js","utils.js","minimax.js","styles.js","ResultModal.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["SCORES","1","0","2","GAME_STATES","GAME_MODES","AI","Friend","Board","grid","_this","this","Object","classCallCheck","makeMove","square","player","getEmptySquares","arguments","length","undefined","squares","forEach","i","push","isEmpty","Math","pow","getWinner","res","el","winningIndex","getStrikethroughStyles","concat","clone","Array","fill","switchPlayer","getRandomInt","min","max","ceil","floor","random","minimax","board","thisScore","mult","String","maxScore","bestMove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","empty","value","copy","err","return","border","css","_templateObject","customStyles","overlay","backgroundColor","ResultModal","_ref","isOpen","close","startNewGame","winner","react_default","a","createElement","StyledModal","onRequestClose","style","ariaHideApp","ModalWrapper","ModalTitle","ModalContent","ModalFooter","Button","onClick","styled","Modal","ResultModal_templateObject","div","_templateObject2","p","_templateObject3","_templateObject4","displayName","_templateObject5","button","_templateObject6","arr","score_1","score_2","switchScoreBoard","Container","TicTacToe_templateObject","_ref2","dims","Square","TicTacToe_templateObject2","Marker","TicTacToe_templateObject3","ButtonRow","TicTacToe_templateObject4","Screen","TicTacToe_templateObject5","Inner","TicTacToe_templateObject6","ChooseText","_templateObject7","Strikethrough","_templateObject8","_ref3","styles","_ref4","TicTacToe","_ref$squares","_useState","useState","human","computer","_useState2","slicedToArray","players","setPlayers","_useState3","_useState4","gameState","setGameState","_useState5","_useState6","setGrid","_useState7","_useState8","setWinner","_useState9","_useState10","nextMove","setNextMove","_useState11","_useState12","modalOpen","setModalOpen","_useState13","_useState14","mode","setMode","_useState15","player_1","_useState16","users","setUser","_useState17","player_2","_useState18","rivals","setRival","useEffect","winnerStr","setTimeout","declareWinner","move","useCallback","index","gridCopy","computerMove","emptyIndices","easy","includes","medium","difficult","timeout","clearTimeout","choosePlayer","option","changeMode","e","target","id","className","keys","map","key","gameMode","Fragment","type","name","placeholder","onChange","event","val","disabled","isActive","data-testid","humanMove","ResultModal_ResultModal","Main","main","App_templateObject","Footer","footer","App_templateObject2","App","src_TicTacToe","Boolean","window","location","hostname","match","setAppElement","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3262eb0.chunk.js","sourcesContent":["//Board dimensions\nexport const DIMS = 3;\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const SCORES = {\n  1: 1,\n  0: 0,\n  2: -1\n};\nexport const SQUARE_DIMS = 100;\nexport const GAME_STATES = {\n  notStarted: \"not_started\",\n  modeSelected: 'mode_selected',\n  inProgress: \"in_progress\",\n  started: \"started\",\n  over: \"over\"\n};\n\nexport const GAME_MODES = {\n  //easy: \"easy\",\n  AI: \"difficult\",\n  Friend: \"Friend\",\n};\n","import { DIMS, DRAW } from \"./constants\";\n\nexport default class Board {\n  constructor(grid) {\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\n    this.winningIndex = null;\n  }\n\n  makeMove = (square, player) => {\n    if (this.grid[square] === null) {\n      this.grid[square] = player;\n    }\n  };\n\n  // Collect indices of empty squares and return them\n  getEmptySquares = (grid = this.grid) => {\n    let squares = [];\n    grid.forEach((square, i) => {\n      if (square === null) squares.push(i);\n    });\n    return squares;\n  };\n\n  isEmpty = (grid = this.grid) => {\n    return this.getEmptySquares(grid).length === DIMS ** 2;\n  };\n\n  getWinner = (grid = this.grid) => {\n    const winningCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    let res = null;\n    winningCombos.forEach((el, i) => {\n      if (\n        grid[el[0]] !== null &&\n        grid[el[0]] === grid[el[1]] &&\n        grid[el[0]] === grid[el[2]]\n      ) {\n        res = grid[el[0]];\n        this.winningIndex = i;\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\n        res = DRAW;\n        this.winningIndex = null;\n      }\n    });\n    return res;\n  };\n\n  /**\n   * Get the styles for strike through based on the combination that won\n   */\n  getStrikethroughStyles = () => {\n    const defaultWidth = 285;\n    const diagonalWidth = 400;\n    switch (this.winningIndex) {\n      case 0:\n        return `\n          transform: none;\n          top: 41px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 1:\n        return `\n          transform: none;\n          top: 140px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 2:\n        return `\n          transform: none;\n          top: 242px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 3:\n        return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: -86px;\n          width: ${defaultWidth}px;\n        `;\n      case 4:\n        return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 15px;\n          width: ${defaultWidth}px;\n        `;\n      case 5:\n        return `\n          transform: rotate(90deg);\n          top: 145px;\n          left: 115px;\n          width: ${defaultWidth}px;\n        `;\n      case 6:\n        return `\n          transform: rotate(45deg);\n          top: 145px;\n          left: -44px;\n          width: ${diagonalWidth}px;\n        `;\n      case 7:\n        return `\n          transform: rotate(-45deg);\n          top: 145px;\n          left: -46px;\n          width: ${diagonalWidth}px;\n        `;\n      default:\n        return null;\n    }\n  };\n\n  clone = () => {\n    return new Board(this.grid.concat());\n  };\n}\n","import { PLAYER_O, PLAYER_X } from \"./constants\";\n\nexport const switchPlayer = player => {\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\n};\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n","import { SCORES } from \"./constants\";\nimport { switchPlayer } from \"./utils\";\n\nexport const minimax = (board, player) => {\n  const mult = SCORES[String(player)];\n  let thisScore;\n  let maxScore = -1;\n  let bestMove = null;\n\n  if (board.getWinner() !== null) {\n    return [SCORES[board.getWinner()], 0];\n  } else {\n    for (let empty of board.getEmptySquares()) {\n      let copy = board.clone();\n      copy.makeMove(empty, player);\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\n\n      if (thisScore >= maxScore) {\n        maxScore = thisScore;\n        bestMove = empty;\n      }\n    }\n\n    return [mult * maxScore, bestMove];\n  }\n};\n","import { css } from \"styled-components\";\n\nexport const border = css`\n  border-bottom-left-radius: 15px 255px;\n  border-bottom-right-radius: 225px 15px;\n  border-top-left-radius: 255px 15px;\n  border-top-right-radius: 15px 225px;\n  border: 2px solid #41403e;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"react-modal\";\nimport { border } from \"./styles\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"rgba(0,0,0, 0.6)\"\n  }\n};\n\nexport const ResultModal = ({ isOpen, close, startNewGame, winner }) => {\n  return (\n    <StyledModal\n      isOpen={isOpen}\n      onRequestClose={close}\n      style={customStyles}\n      ariaHideApp={false}\n    >\n      <ModalWrapper>\n        <ModalTitle>Game over</ModalTitle>\n        <ModalContent>{winner}</ModalContent>\n\n        <ModalFooter>\n          <Button onClick={close}>Play Again</Button>\n          <Button onClick={startNewGame}>Start over</Button>\n        </ModalFooter>\n      </ModalWrapper>\n    </StyledModal>\n  );\n};\nconst StyledModal = styled(Modal)`\n  height: 300px;\n  position: relative;\n  margin: 0 auto;\n  top: 10%;\n  right: auto;\n  bottom: auto;\n  width: 320px;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n`;\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  background-color: #fff;\n  max-height: 100%;\n  height: 100%;\n  align-items: center;\n  backface-visibility: hidden;\n  padding: 1.25rem;\n  ${border};\n`;\n\nconst ModalTitle = styled.p`\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nconst ModalContent = styled.p`\n  flex: 1 1 auto;\n  text-align: center;\n`;\nModalContent.displayName = \"ModalContent\";\n\nconst ModalFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex: 0 0 auto;\n  width: 100%;\n`;\n\nconst Button = styled.button`\n  font-size: 16px;\n`;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  PLAYER_X,\n  PLAYER_O,\n  SQUARE_DIMS,\n  DRAW,\n  GAME_STATES,\n  DIMS,\n  GAME_MODES\n} from \"./constants\";\nimport Board from \"./Board\";\nimport { getRandomInt, switchPlayer } from \"./utils\";\nimport { minimax } from \"./minimax\";\nimport { ResultModal } from \"./ResultModal\";\nimport { border } from \"./styles\";\n\nconst arr = new Array(DIMS ** 2).fill(null);\nconst board = new Board();\n\nlet score_1=0;\nlet score_2=0;\nlet switchScoreBoard = false;\n\nconst TicTacToe = ({ squares = arr }) => {\n  const [players, setPlayers] = useState({ human: null, computer: null, Friend:null});\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n  const [grid, setGrid] = useState(squares);\n  const [winner, setWinner] = useState(null);\n  const [nextMove, setNextMove] = useState(null);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [mode, setMode] = useState('Friend');\n  const [users,setUser] = useState({ player_1:''});\n  const [rivals,setRival] = useState({player_2:'' });\n\n  /**\n   * On every move, check if there is a winner. If yes, set game state to over and open result modal\n   */\n  useEffect(() => {\n    const winner = board.getWinner(grid);\n    const declareWinner = winner => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins!\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins!\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a draw\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n      // Slight delay for the modal so there is some time to see the last move\n      setTimeout(() => setModalOpen(true), 300);\n    };\n\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove]);\n\n  /**\n   * Set the grid square with respective player that made the move. Only make a move when the game is in progress.\n   * useCallback is necessary to prevent unnecessary recreation of the function, unless gameState changes, since it is\n   * being tracked in useEffect\n   * @type {Function}\n   */\n  const move = useCallback(\n    (index, player) => {\n      if (player && gameState === GAME_STATES.inProgress) {\n        setGrid(grid => {\n          const gridCopy = grid.concat();\n          gridCopy[index] = player;\n          return gridCopy;\n        });\n      }\n    },\n    [gameState]\n  );\n\n  /**\n   * Make computer move. If it's the first move (board is empty), make move at any random cell to skip\n   * unnecessary minimax calculations\n   * @type {Function}\n   */\n  const computerMove = useCallback(() => {\n    // Important to pass a copy of the grid here\n    const board = new Board(grid.concat());\n    const emptyIndices = board.getEmptySquares(grid);\n    let index;\n    switch (mode) {\n      case GAME_MODES.easy:\n        do {\n          index = getRandomInt(0, 8);\n        } while (!emptyIndices.includes(index));\n        break;\n      case GAME_MODES.medium:\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\n        if (smartMove) {\n          index = minimax(board, players.computer)[1];\n        } else {\n          do {\n            index = getRandomInt(0, 8);\n          } while (!emptyIndices.includes(index));\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        index = board.isEmpty(grid)\n          ? getRandomInt(0, 8)\n          : minimax(board, players.computer)[1];\n    }\n    if (!grid[index]) {\n      move(index, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, grid, players, mode]);\n\n  /**\n   * Make computer move when it's computer's turn\n   */\n  useEffect(() => {\n    let timeout;\n    if (\n      nextMove !== null &&\n      nextMove === players.computer &&\n      gameState !== GAME_STATES.over\n    ) {\n      // Delay computer moves to make them more natural\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n  \n  const humanMove = index => {\n      if(mode!== 'Friend'){\n      if (!grid[index] && nextMove === players.human) {\n        move(index, players.human);\n        setNextMove(players.computer);\n      }\n    }\n    else{\n      if(!grid[index] && nextMove === players.human){\n        move(index, players.human);\n        setNextMove(players.Friend);\n      }\n      else if (!grid[index] && nextMove === players.Friend) {\n        move(index, players.Friend);\n        setNextMove(players.human);\n      }\n    }\n  };\n\n  const choosePlayer = option => {\n    if(option === 2){\n      switchScoreBoard = true;\n    }\n    else{\n      switchScoreBoard = false;\n    }\n    if(mode!=='Friend'){\n      setPlayers({ human: option, computer: switchPlayer(option) });\n      setRival({player_2:'AI'});       \n    }\n    else{\n      setPlayers({ human: option, Friend: switchPlayer(option) });\n      setRival({player_2:''});  \n    }\n    setGameState(GAME_STATES.started);\n    setNextMove(PLAYER_X);\n  };\n\n\n  const startNewGame = () => {\n    score_1 =0;\n    score_2 =0;;\n    setGameState(GAME_STATES.notStarted);\n    setGrid(arr);\n    setModalOpen(false);\n  };\n\n  const closeNewGame = () =>{\n    if(winner === 'Player X wins!'){\n      score_1 = score_1+1;\n    }\n    if(winner === 'Player O wins!'){\n      score_2 = score_2+1;\n    }\n    setGameState(GAME_STATES.inProgress);\n    setGrid(arr);\n    setModalOpen(false);\n  }\n\n  \n  const changeMode = e => {    \n    setMode(e.target.value);\n    setGameState(GAME_STATES.modeSelected);\n  };\n\n  const myChangeHandlerPlayer1 = (event) => {\n    let val = event.target.value;\n    setUser({ player_1 : val})\n  }\n  const myChangeHandlerPlayer2 = (event) =>{\n      let val = event.target.value;\n      setRival({player_2:val})    \n  }\n\n  const startGame = () => {\n    if(users.player_1!=='' && rivals.player_2!=='')\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  }\n\n  return gameState === GAME_STATES.notStarted ? (\n    <Screen>\n    <h2>Tic Tac Toe</h2>\n        <span id=\"x\" className='header-x-image'>X</span>\n        <div className=\"outer header-image\"><div className=\"inner\">&nbsp;</div></div>\n      \n      <Inner>\n        <ChooseText><strong>Choose you play mode</strong></ChooseText>\n          {Object.keys(GAME_MODES).map(key => {\n            const gameMode = GAME_MODES[key];\n            return (\n                <button id={key} onClick={changeMode} key={gameMode} value={gameMode}>{key}</button>\n            );\n          })}\n        </Inner>\n    </Screen>\n  ) : gameState === GAME_STATES.modeSelected ? (\n  <Inner>\n    <h2>Tic Tac Toe</h2>\n\n  <ChooseText><strong>Pick your side</strong></ChooseText>\n  <ButtonRow>\n    <button id='X' onClick={() => choosePlayer(PLAYER_X)}><span id=\"x\" className='header-x-image-box'>X</span></button>\n    <p id='or'>or</p>\n    <button id='O' onClick={() => choosePlayer(PLAYER_O)}><div className=\"outer-box\"><div className=\"inner-box\">&nbsp;</div> </div> </button>\n  </ButtonRow>\n</Inner> \n  ) : gameState === GAME_STATES.started ? (\n    <React.Fragment>\n    <h2>Tic Tac Toe</h2>\n    <form className='showFormPlayerInput'>\n      <label>Player 1:\n      <input type='text' id='player_1' name='player_1' placeholder='Player X...' onChange={myChangeHandlerPlayer1}>\n      </input> \n      </label>   \n       <label>Player 2:\n       <input type='text' id='player_2' name='player_2' placeholder={rivals.player_2==='AI'?'AI':'player O...'} disabled={rivals.player_2==='AI'} onChange={myChangeHandlerPlayer2}>\n       </input>     \n       </label>  \n       <button type='button' id='continue' onClick={startGame}>Continue</button>\n    </form> \n    </React.Fragment>\n  ) : (\n\n    <React.Fragment>\n\n    <h2>Tic Tac Toe</h2>\n    \n    <ul className='matchPlayers'>\n      <li className='home_player'>\n        {users.player_1}\n      </li>\n      <li className='rival_player'>\n        {rivals.player_2}\n      </li>\n    </ul>\n    <ul className='matchPlayers'>\n    { switchScoreBoard ?<React.Fragment> <li className='home_player'>{score_2}</li><li className='rival_player'>{score_1}</li></React.Fragment> : <React.Fragment> <li className='home_player'>{score_1}</li><li className='rival_player'>{score_2}</li> </React.Fragment> }\n    </ul>\n  \n    <Container dims={DIMS}>\n      {grid.map((value, index) => {\n        const isActive = value !== null;\n        return (\n          <Square\n            data-testid={`square_${index}`}\n            key={index}\n            onClick={() => humanMove(index)}\n          >\n            {isActive && <Marker>{value === PLAYER_X ? <span id=\"x\" className='header-x-image-board'>X</span> : <div className=\"outer\"><div className=\"inner\">&nbsp;</div></div>}</Marker>}\n          </Square>\n        );\n      })}\n      <Strikethrough\n        styles={\n          gameState === GAME_STATES.over && board.getStrikethroughStyles()\n        }\n      />\n      <ResultModal\n        isOpen={modalOpen}\n        winner={winner}\n        close={closeNewGame}\n        startNewGame={startNewGame}\n      />\n    </Container>\n    </React.Fragment>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\n  flex-flow: wrap;\n  position: relative;\n`;\n\nconst Square = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${SQUARE_DIMS}px;\n  height: ${SQUARE_DIMS}px;\n  ${border};\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nSquare.displayName = \"Square\";\n\nconst Marker = styled.div`\n  font-size: 68px;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  width: 150px;\n  justify-content: space-between;\n`;\n\nconst Screen = styled.div``;\n\nconst Inner = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 30px;\n`;\nconst ChooseText = styled.p``;\n\nconst Strikethrough = styled.div`\n  position: absolute;\n  ${({ styles }) => styles}\n  background-color: indianred;\n  height: 5px;\n  width: ${({ styles }) => !styles && \"0px\"};\n`;\n\nexport default TicTacToe;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TicTacToe from \"./TicTacToe\";\nimport \"papercss/dist/paper.min.css\";\n\nfunction App() {\n  return (\n    <>\n      <Main>\n        <TicTacToe />\n      </Main>\n      <Footer>\n      </Footer>\n    </>\n  );\n}\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1 0 auto;\n`;\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  flex: 0 0 auto;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}